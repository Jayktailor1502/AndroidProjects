apply plugin: 'maven-publish'

// Generate sources
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}
//Archives sources
artifacts {
    archives sourcesJar
}

artifactoryPublish.dependsOn('build')

publishing {
    publications {
        aar(MavenPublication) {
            // from components.java
            groupId = project.getGroup()
            artifactId = project.getName()
            version = project.getVersion()
            artifact("$buildDir/outputs/aar/${project.getName()}-release.aar")


            pom.withXml {
                final dependenciesNode = asNode().appendNode('dependencies')

                ext.addDependency = { Dependency dep, String scope ->
                    if (dep.group == null || dep.version == null || dep.name == null || dep.name == "unspecified")
                        return // invalid dependencies should be ignored

                    final dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('artifactId', dep.name)

                    if (dep.version == 'unspecified') {
                        dependencyNode.appendNode('groupId', project.pomGroupID)
                        dependencyNode.appendNode('version', project.pomVersion)
                        System.println("${project.pomGroupID} ${dep.name} ${project.pomVersion}")
                    } else {
                        dependencyNode.appendNode('groupId', dep.group)
                        dependencyNode.appendNode('version', dep.version)
                        System.println("${dep.group} ${dep.name} ${dep.version}")
                    }

//                    dependencyNode.appendNode('scope', scope)
                    // Some dependencies may have types, such as aar, that should be mentioned in the POM file
                    def artifactsList = dep.properties['artifacts']
                    if (artifactsList != null && artifactsList.size() > 0) {
                        final artifact = artifactsList[0]
                        dependencyNode.appendNode('type', artifact.getType())
                    }

                    if (!dep.transitive) {
                        // In case of non transitive dependency, all its dependencies should be force excluded from them POM file
                        final exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
                        exclusionNode.appendNode('groupId', '*')
                        exclusionNode.appendNode('artifactId', '*')
                    } else if (!dep.properties.excludeRules.empty) {
                        // For transitive with exclusions, all exclude rules should be added to the POM file
                        final exclusions = dependencyNode.appendNode('exclusions')
                        dep.properties.excludeRules.each { ExcludeRule rule ->
                            final exclusionNode = exclusions.appendNode('exclusion')
                            exclusionNode.appendNode('groupId', rule.group ?: '*')
                            exclusionNode.appendNode('artifactId', rule.module ?: '*')
                        }
                    }
                }

                configurations.api.getDependencies().each { dep -> addDependency(dep, "compile") }
                configurations.implementation.getDependencies().each { dep -> addDependency(dep, "compile") }
            }

        }
    }
}

artifactory {
    if (file("$rootProject.projectDir/artifactoryCredentials.properties").exists()) {
        def Properties props = new Properties()
        def propFile = new File('artifactoryCredentials.properties')
        props.load(new FileInputStream(propFile))
        clientConfig.setIncludeEnvVars(true)
        clientConfig.info.addEnvironmentProperty('test.adding.dynVar', new Date().toString())
        contextUrl = props.getProperty("artifactory_url")
        publish {
            repository {
                repoKey = props.getProperty("artifactory_repo")// The Artifactory repository key to publish to
                username = props.getProperty("artifactory_username")
                password = props.getProperty("artifactory_password")
            }
            defaults {
// Reference to Gradle publications defined in the build script.
// This is how we tell the Artifactory Plugin which artifacts should be
// published to Artifactory.
                publishArtifacts = true
// Properties to be attached to the published artifacts.
                properties = ['qa.level': 'basic', 'dev.team': 'core']
                publishPom = true // Publish generated POM files to Artifactory (true by default)
            }
        }
    }
}


artifactoryPublish {
    publications(publishing.publications.aar)
}